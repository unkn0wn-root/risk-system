services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  risk-engine:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: risk-engine
      target: final
    container_name: risk-engine
    ports:
      - "50052:50052"
    environment:
      - PORT=50052
      - RISK_DATABASE_URL=host=postgres user=risk_admin password=risky_password dbname=risk_analytics port=5432 sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50052"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: notification
      target: final
    container_name: notification-service
    ports:
      - "50053:50053"
    environment:
      - PORT=50053
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - EMAIL_PROVIDER=SIMULATE
      - SMS_PROVIDER=SIMULATE
      - PUSH_PROVIDER=SIMULATE
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50053"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: user
      target: final
    container_name: user-service
    ports:
      - "50051:50051"
    environment:
      - PORT=50051
      - DATABASE_URL=host=postgres user=app_admin password=app_password dbname=users port=5432 sslmode=disable
      - RISK_SERVICE_URL=risk-engine:50052
      - NOTIFICATION_SERVICE_URL=notification-service:50053
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - JWT_SECRET=dev-secret-key-change-in-production-make-it-long-and-random
      - JWT_ISSUER=user-risk-system
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      risk-engine:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
      target: final
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - USER_SERVICE_URL=user-service:50051
      - RISK_SERVICE_URL=risk-engine:50052
      - JWT_SECRET=dev-secret-key-change-in-production-make-it-long-and-random
      - JWT_ISSUER=user-risk-system
    depends_on:
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
