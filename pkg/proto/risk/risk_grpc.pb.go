// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: pkg/proto/risk/risk.proto

package risk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RiskService_CheckRisk_FullMethodName = "/risk.RiskService/CheckRisk"
)

// RiskServiceClient is the client API for RiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskServiceClient interface {
	CheckRisk(ctx context.Context, in *RiskCheckRequest, opts ...grpc.CallOption) (*RiskCheckResponse, error)
}

type riskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskServiceClient(cc grpc.ClientConnInterface) RiskServiceClient {
	return &riskServiceClient{cc}
}

func (c *riskServiceClient) CheckRisk(ctx context.Context, in *RiskCheckRequest, opts ...grpc.CallOption) (*RiskCheckResponse, error) {
	out := new(RiskCheckResponse)
	err := c.cc.Invoke(ctx, RiskService_CheckRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskServiceServer is the server API for RiskService service.
// All implementations must embed UnimplementedRiskServiceServer
// for forward compatibility
type RiskServiceServer interface {
	CheckRisk(context.Context, *RiskCheckRequest) (*RiskCheckResponse, error)
	mustEmbedUnimplementedRiskServiceServer()
}

// UnimplementedRiskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiskServiceServer struct {
}

func (UnimplementedRiskServiceServer) CheckRisk(context.Context, *RiskCheckRequest) (*RiskCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRisk not implemented")
}
func (UnimplementedRiskServiceServer) mustEmbedUnimplementedRiskServiceServer() {}

// UnsafeRiskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskServiceServer will
// result in compilation errors.
type UnsafeRiskServiceServer interface {
	mustEmbedUnimplementedRiskServiceServer()
}

func RegisterRiskServiceServer(s grpc.ServiceRegistrar, srv RiskServiceServer) {
	s.RegisterService(&RiskService_ServiceDesc, srv)
}

func _RiskService_CheckRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).CheckRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_CheckRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).CheckRisk(ctx, req.(*RiskCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskService_ServiceDesc is the grpc.ServiceDesc for RiskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.RiskService",
	HandlerType: (*RiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRisk",
			Handler:    _RiskService_CheckRisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/risk/risk.proto",
}

const (
	RiskAdminService_CreateRiskRule_FullMethodName = "/risk.RiskAdminService/CreateRiskRule"
	RiskAdminService_UpdateRiskRule_FullMethodName = "/risk.RiskAdminService/UpdateRiskRule"
	RiskAdminService_DeleteRiskRule_FullMethodName = "/risk.RiskAdminService/DeleteRiskRule"
	RiskAdminService_ListRiskRules_FullMethodName  = "/risk.RiskAdminService/ListRiskRules"
	RiskAdminService_GetRiskStats_FullMethodName   = "/risk.RiskAdminService/GetRiskStats"
)

// RiskAdminServiceClient is the client API for RiskAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskAdminServiceClient interface {
	CreateRiskRule(ctx context.Context, in *CreateRiskRuleRequest, opts ...grpc.CallOption) (*CreateRiskRuleResponse, error)
	UpdateRiskRule(ctx context.Context, in *UpdateRiskRuleRequest, opts ...grpc.CallOption) (*UpdateRiskRuleResponse, error)
	DeleteRiskRule(ctx context.Context, in *DeleteRiskRuleRequest, opts ...grpc.CallOption) (*DeleteRiskRuleResponse, error)
	ListRiskRules(ctx context.Context, in *ListRiskRulesRequest, opts ...grpc.CallOption) (*ListRiskRulesResponse, error)
	GetRiskStats(ctx context.Context, in *GetRiskStatsRequest, opts ...grpc.CallOption) (*GetRiskStatsResponse, error)
}

type riskAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskAdminServiceClient(cc grpc.ClientConnInterface) RiskAdminServiceClient {
	return &riskAdminServiceClient{cc}
}

func (c *riskAdminServiceClient) CreateRiskRule(ctx context.Context, in *CreateRiskRuleRequest, opts ...grpc.CallOption) (*CreateRiskRuleResponse, error) {
	out := new(CreateRiskRuleResponse)
	err := c.cc.Invoke(ctx, RiskAdminService_CreateRiskRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAdminServiceClient) UpdateRiskRule(ctx context.Context, in *UpdateRiskRuleRequest, opts ...grpc.CallOption) (*UpdateRiskRuleResponse, error) {
	out := new(UpdateRiskRuleResponse)
	err := c.cc.Invoke(ctx, RiskAdminService_UpdateRiskRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAdminServiceClient) DeleteRiskRule(ctx context.Context, in *DeleteRiskRuleRequest, opts ...grpc.CallOption) (*DeleteRiskRuleResponse, error) {
	out := new(DeleteRiskRuleResponse)
	err := c.cc.Invoke(ctx, RiskAdminService_DeleteRiskRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAdminServiceClient) ListRiskRules(ctx context.Context, in *ListRiskRulesRequest, opts ...grpc.CallOption) (*ListRiskRulesResponse, error) {
	out := new(ListRiskRulesResponse)
	err := c.cc.Invoke(ctx, RiskAdminService_ListRiskRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskAdminServiceClient) GetRiskStats(ctx context.Context, in *GetRiskStatsRequest, opts ...grpc.CallOption) (*GetRiskStatsResponse, error) {
	out := new(GetRiskStatsResponse)
	err := c.cc.Invoke(ctx, RiskAdminService_GetRiskStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskAdminServiceServer is the server API for RiskAdminService service.
// All implementations must embed UnimplementedRiskAdminServiceServer
// for forward compatibility
type RiskAdminServiceServer interface {
	CreateRiskRule(context.Context, *CreateRiskRuleRequest) (*CreateRiskRuleResponse, error)
	UpdateRiskRule(context.Context, *UpdateRiskRuleRequest) (*UpdateRiskRuleResponse, error)
	DeleteRiskRule(context.Context, *DeleteRiskRuleRequest) (*DeleteRiskRuleResponse, error)
	ListRiskRules(context.Context, *ListRiskRulesRequest) (*ListRiskRulesResponse, error)
	GetRiskStats(context.Context, *GetRiskStatsRequest) (*GetRiskStatsResponse, error)
	mustEmbedUnimplementedRiskAdminServiceServer()
}

// UnimplementedRiskAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiskAdminServiceServer struct {
}

func (UnimplementedRiskAdminServiceServer) CreateRiskRule(context.Context, *CreateRiskRuleRequest) (*CreateRiskRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiskRule not implemented")
}
func (UnimplementedRiskAdminServiceServer) UpdateRiskRule(context.Context, *UpdateRiskRuleRequest) (*UpdateRiskRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRiskRule not implemented")
}
func (UnimplementedRiskAdminServiceServer) DeleteRiskRule(context.Context, *DeleteRiskRuleRequest) (*DeleteRiskRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRiskRule not implemented")
}
func (UnimplementedRiskAdminServiceServer) ListRiskRules(context.Context, *ListRiskRulesRequest) (*ListRiskRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRiskRules not implemented")
}
func (UnimplementedRiskAdminServiceServer) GetRiskStats(context.Context, *GetRiskStatsRequest) (*GetRiskStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskStats not implemented")
}
func (UnimplementedRiskAdminServiceServer) mustEmbedUnimplementedRiskAdminServiceServer() {}

// UnsafeRiskAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskAdminServiceServer will
// result in compilation errors.
type UnsafeRiskAdminServiceServer interface {
	mustEmbedUnimplementedRiskAdminServiceServer()
}

func RegisterRiskAdminServiceServer(s grpc.ServiceRegistrar, srv RiskAdminServiceServer) {
	s.RegisterService(&RiskAdminService_ServiceDesc, srv)
}

func _RiskAdminService_CreateRiskRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRiskRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAdminServiceServer).CreateRiskRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskAdminService_CreateRiskRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAdminServiceServer).CreateRiskRule(ctx, req.(*CreateRiskRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAdminService_UpdateRiskRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiskRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAdminServiceServer).UpdateRiskRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskAdminService_UpdateRiskRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAdminServiceServer).UpdateRiskRule(ctx, req.(*UpdateRiskRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAdminService_DeleteRiskRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRiskRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAdminServiceServer).DeleteRiskRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskAdminService_DeleteRiskRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAdminServiceServer).DeleteRiskRule(ctx, req.(*DeleteRiskRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAdminService_ListRiskRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRiskRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAdminServiceServer).ListRiskRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskAdminService_ListRiskRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAdminServiceServer).ListRiskRules(ctx, req.(*ListRiskRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskAdminService_GetRiskStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskAdminServiceServer).GetRiskStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskAdminService_GetRiskStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskAdminServiceServer).GetRiskStats(ctx, req.(*GetRiskStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskAdminService_ServiceDesc is the grpc.ServiceDesc for RiskAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.RiskAdminService",
	HandlerType: (*RiskAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRiskRule",
			Handler:    _RiskAdminService_CreateRiskRule_Handler,
		},
		{
			MethodName: "UpdateRiskRule",
			Handler:    _RiskAdminService_UpdateRiskRule_Handler,
		},
		{
			MethodName: "DeleteRiskRule",
			Handler:    _RiskAdminService_DeleteRiskRule_Handler,
		},
		{
			MethodName: "ListRiskRules",
			Handler:    _RiskAdminService_ListRiskRules_Handler,
		},
		{
			MethodName: "GetRiskStats",
			Handler:    _RiskAdminService_GetRiskStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/risk/risk.proto",
}
